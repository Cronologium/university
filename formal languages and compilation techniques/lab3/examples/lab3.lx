%{
#include <stdlib.h>
#include <string.h>
#include <math.h>

typedef struct{
    int id1;
    int id2;
    }FIP;

typedef struct{
    char nume[10];
}TSiden;

int fipLength=0;
int constLength = 0;
int identifLength = 0;
int identifCode = 0;
int constCode = 1;
FIP program[300];

TSiden TSidentif[30];

float TSconstante[30];


void addFip(int id1 , int id2){
    program[fipLength].id1 = id1;
    program[fipLength].id2 = id2;
    fipLength++;
}

void addConst(float atom){
    int gasit = 0 ;
    int i;
    for(i = 0;i<constLength;i++){
        if (TSconstante[i] == atom){
            gasit =1;
            addFip(constCode,i);
        }
    }
    if (gasit == 0){
        TSconstante[constLength]=atom;
        addFip(constCode,constLength);
        constLength++;
    }

}

void addIdentif(char* atom){
    int gasit = 0 ;
     int i= 0;

    while(i<identifLength){
        int rez = strcmp(TSidentif[i].nume,atom);
        if(strcmp(TSidentif[i].nume,atom)==0){
            gasit =1;
            addFip(identifCode,i);
        }
        i++;
    }

    if (gasit == 0){
        strcpy(TSidentif[identifLength].nume,atom);
        addFip(identifCode,identifLength);
        identifLength++;
    }
}

void showFIP(){
    printf("FIP\n");
    int t;
    for(t=0;t<fipLength;t++){
        if(program[t].id1 != identifCode && program[t].id1 != constCode){
          printf(" %d|- ",program[t].id1);
        }
        else{
          printf(" %d|%d ",program[t].id1,program[t].id2);
        }
    }
}

void showConst(){
    printf("Constante\n");
    int i;
    for(i = 0 ;i<constLength;i++)
        printf(" %f|%d", TSconstante[i] , i);
    printf("\n");
}

void showId(){
    printf("Identificatori\n");
    int i;
    for(i = 0 ;i<identifLength;i++)
        printf(" %s|%d", TSidentif[i].nume , i);
    printf("\n");
}

void show(){
    showConst();
    showId();
    showFIP();
}

%}

%option noyywrap
DIGIT 		[0-9]
ID      [a-z][a-z0-9]*

%%
{DIGIT}+                                addConst(atoi( yytext ));
{DIGIT}+"."{DIGIT}*                     addConst(atof( yytext ));

\identificator                          addFip(0,0);
\constanta                              addFip(1,0);
function                               addFip(2,0);
const                                  addFip(3,0);
var                                    addFip(4,0);
begin                                  addFip(5,0);
end                                    addFip(6,0);
if                                     addFip(7,0);
else                                     addFip(8,0);
for                                     addFip(9,0);
while                                      addFip(10,0);
integer                                      addFip(11,0);
real                                    addFip(12,0);
array                                     addFip(13,0);
of                                     addFip(14,0);
read                                      addFip(15,0);
write                                      addFip(16,0);
call                                     addFip(17,0);
\(                                     addFip(18,0);
\)                              addFip(19,0);
\{                                   addFip(20,0);
\}                                    addFip(21,0);
\,                                      addFip(22,0);
\+                                      addFip(23,0);
\-                                      addFip(24,0);
\*                                      addFip(25,0);
\/                                      addFip(26,0);
\%                                    addFip(27,0);
\>                                     addFip(28,0);
\<                                addFip(29,0);
\>=                                     addFip(30,0);
\<=                                      addFip(31,0);
\=                                     addFip(32,0);
\!=                                     addFip(33,0);
\==                                     addFip(34,0);
\[                                    addFip(35,0);
\]                                    addFip(36,0);
\.                                   addFip(37,0);
\:                                    addFip(38,0);
\OR                                    addFip(39,0);
\AND                                    addFip(40,0);
{ID}                                    addIdentif( yytext);

[ \t\n]+             ;/* eat up whitespace */
. {
  if(yytext[0] != 13) {
    printf("illegal token %s si %d !",yytext,yytext[0]);
  }
}
%%
main( argc, argv )
int argc;
char **argv;
{
    ++argv, --argc; /* skip over program name */
    if ( argc > 0 )
    	yyin = fopen( argv[0], "r" );
    else
     	yyin = stdin;
    yylex();
    show();
}
